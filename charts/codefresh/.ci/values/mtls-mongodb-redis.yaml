seed:
  mongoSeedJob:
    mongodbRootURI: mongodb://root:XT9nmM8dZDZ@cf-mongodb:27017/?authSource=admin
    mongodbRootOptions: authSource=admin
    mongodbRootPassword: XT9nmM8dZDZ

global:
  appUrl: ""  # placeholder for ${CF_APP_HOST}
  firebaseSecret: ""  # placeholder for ${FIREBASE_SECRET}

  mongoURI: "mongodb://cf-mongodb:27017/?ssl=true&authMechanism=MONGODB-X509&authSource=$external"
  redisUrl: cf-redis
  postgresPort: 6432

  volumes:
    mongodb-tls:
      enabled: true
      type: secret
      optional: true
      nameOverride: cf-codefresh-mongodb-tls
    redis-tls:
      enabled: true
      type: secret
      optional: true
      nameOverride: cf-redis-crt

  volumeMounts:
    mongodb-tls:
      path:
      - mountPath: /etc/ssl/mongodb/ca.pem
        subPath: ca.pem
    redis-tls:
      path:
      - mountPath: /etc/ssl/redis

  env:
    # Mongo MTLS
    MONGODB_SSL_ENABLED: true
    MTLS_CERT_PATH: /etc/ssl/mongodb/ca.pem
    RUNTIME_MTLS_CERT_PATH: /etc/ssl/mongodb/ca.pem
    RUNTIME_MONGO_TLS: "true"
    RUNTIME_MONGO_TLS_VALIDATE: "false"
    MONGO_MTLS_VALIDATE: "false"
    # Redis MTLS
    REDIS_TLS: true
    REDIS_REJECT_UNAUTHORIZED: false
    REDIS_TLS_SKIP_VERIFY: true
    REDIS_CA_PATH: /etc/ssl/redis/ca.crt
    REDIS_CLIENT_CERT_PATH : /etc/ssl/redis/tls.crt
    REDIS_CLIENT_KEY_PATH: /etc/ssl/redis/tls.key

ingress:
  enabled: true
  ingressClassName: nginx
  tls:
    enabled: false

mongodb:
  auth:
    enabled: true
    rootUser: root
    rootPassword: "XT9nmM8dZDZ"
  initdbScripts:
    my_init_script.sh: |
      #!/bin/bash

      set -eou xtrace

      export MONGODB_ROOT_URI=mongodb://root:XT9nmM8dZDZ@127.0.0.1/?authSource=admin
      MONGODB_DATABASES=(
        "archive"
        "audit"
        "charts-manager"
        "cluster-providers"
        "codefresh"
        "context-manager"
        "gitops-dashboard-manager"
        "k8s-monitor"
        "pipeline-manager"
        "platform-analytics-postgres"
        "read-models"
        "runtime-environment-manager"
      )

      mongosh "$MONGODB_ROOT_URI" --eval 'db.getSiblingDB("\$external").runCommand( { createUser: "CN=cfuser,O=Internet Widgits Pty Ltd,ST=Some-State,C=AU", roles: [ { role: "readWrite", db: "test" }, { role: "userAdminAnyDatabase", db: "admin" }, { role: "readWrite", db: "codefresh" }, { role: "readWrite", db: "pipeline-manager" }, { role: "readWrite", db: "runtime-environment-manager" }, { role: "readWrite", db: "context-manager" }, { role: "readWrite", db: "cluster-providers" }, { role: "readWrite", db: "charts-manager" }, { role: "readWrite", db: "k8s-monitor" }, { role: "readWrite", db: "read-models" }, { role: "readWrite", db: "audit" }, { role: "readWrite", db: "platform-analytics-postgres" } ], writeConcern: { w: "majority" , wtimeout: 5000 } } )'

      for MONGODB_DATABASE in ${MONGODB_DATABASES[@]}; do
        mongosh ${MONGODB_ROOT_URI} --eval "db.getSiblingDB('${MONGODB_DATABASE}').createCollection('test')"
      done

# mongoimport --uri ${MONGODB_ROOT_URI} --db codefresh --collection idps --type json --legacy --file /usr/share/extras/idps.json
# mongoimport --uri ${MONGODB_ROOT_URI} --db codefresh --collection accounts --type json --legacy --file /usr/share/extras/accounts.json
# mongoimport --uri ${MONGODB_ROOT_URI} --db codefresh --collection users --type json --legacy --file /usr/share/extras/users.json

  extraVolumeMounts:
    - name: extras
      mountPath: /usr/share/extras
      readOnly: true

  extraVolumes:
    - name: extras
      configMap:
        name: cf-codefresh-mongo-seed

  tls:
    enabled: true
    autoGenerated: false
    caCert: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lRZWVySXdOWkNpdyt1alRPdHZ2TEZLREFOQmdrcWhraUc5dzBCQVFzRkFEQVYKTVJNd0VRWURWUVFERXdwdGVVMXZibWR2TFdOaE1CNFhEVEl5TVRFd01qRTRNRFl6TWxvWERUTXlNVEF6TURFNApNRFl6TWxvd0ZURVRNQkVHQTFVRUF4TUtiWGxOYjI1bmJ5MWpZVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnRVBBRENDQVFvQ2dnRUJBTGxpV3dIVDQ5OWE0MzgrUWZjcExTNThVT2FsV3ArVXhkWVYwQjZkVTlFejlQSW4KTncydXZqNWtjN3RtU08xUk5ReEJRVjZpOHNBWHdQcTM1WlZYdTQ2OHhURkdHMXZBTWhrTkQ1OTJWd3JFNElCSgpTMm9XNEV6UWJPR3Fsd2ZBanNMZ1VlRjdBbHRuUEVNMjBSQ3hpMzhPNGY0VHZNZHpQamhIa2NNU2NMaHNhYjRlCjYrbVA0MFJBcEdLc2hwV2YwbnoyMXErWU83Zm4wNjVYd3dvUVBvL1BZa0FLdWNHZk1xRjltYXRCYWdUMlVwT0cKSFlRa2pzRW1zSmxEdkhsV1RBdzU2eFl4UU9UbUVWU2hkYzlKRDNmWEZEVkd6L1NVYkZXQTVualBLL0QvbXdpawppM0RaL0h6SUVEbXBJUElxRERsTGdIL3F6b3Jlb0NKMjB1YnlCb1VDQXdFQUFhTmhNRjh3RGdZRFZSMFBBUUgvCkJBUURBZ0trTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQVBCZ05WSFJNQkFmOEUKQlRBREFRSC9NQjBHQTFVZERnUVdCQlFXTWg5RDRiVkljRWQ2dVBOZ1RqWGpMWUpoSmpBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFSUTBaV3F0dUlLWHNHTTJ4TW1Za0VJTHprckJySktiWXhIOFlCUEJFTjZZT09la0o2Q1FhCjQzZitmaHJlQ2o4NFdwSzdwckNEcjJYTmlHNHJlYjBrU2dYdmpyZUVBTzU0Q1FzelJwR0xUVjROMTBjTDdHUVoKaXd6OElGMXppTld4WXVXK29aSFRBQ2NMRkJkUnFFZWNSWUJXTU0vaDhZcldoWTRIaXlIMHp4UkRsOGNpU2ZOMApoa2lURzZQd0V0S29ZRWUwZ21OWXhkWFNzZ2FMZFlUMjNiMGJsMlB3OUdZdkJlWmFpZlZTbllDYmhmTDNPVkQxCjV6YnBXNHhmMEJyM0VGbStrUHh0SGxVR2FsUXdFb3NSVy9kWEpFWFVQTHNGb2xPRDRiR0xvblE4Z2VHcFVYVzQKR3prV0g5QTFXUlE4bWIxd0ZDTkZNVjgvUWxKams3MEJFUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
    caKey: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdVdKYkFkUGozMXJqZno1Qjl5a3RMbnhRNXFWYW41VEYxaFhRSHAxVDBUUDA4aWMzCkRhNitQbVJ6dTJaSTdWRTFERUZCWHFMeXdCZkErcmZsbFZlN2pyekZNVVliVzhBeUdRMFBuM1pYQ3NUZ2dFbEwKYWhiZ1ROQnM0YXFYQjhDT3d1QlI0WHNDVzJjOFF6YlJFTEdMZnc3aC9oTzh4M00rT0VlUnd4Snd1R3hwdmg3cgo2WS9qUkVDa1lxeUdsWi9TZlBiV3I1Zzd0K2ZUcmxmRENoQStqODlpUUFxNXdaOHlvWDJacTBGcUJQWlNrNFlkCmhDU093U2F3bVVPOGVWWk1ERG5yRmpGQTVPWVJWS0YxejBrUGQ5Y1VOVWJQOUpSc1ZZRG1lTThyOFArYkNLU0wKY05uOGZNZ1FPYWtnOGlvTU9VdUFmK3JPaXQ2Z0luYlM1dklHaFFJREFRQUJBb0lCQUNIQ3JxNHJoMkVpclRGOApCZ2xiMzFXSzREVFF3aXN6cmIrcUkwZWdBU2FsSHFPR3pyallMTjh4N2YyZnlBSW4rdEFyaGhzVTg3NVYxUmdUCnEyVENJRzhESTZvd2lVVHhRRzVkZVkzaHdFSSt6bCt1ZVdSdG5CV0JFNE1aVFAzbGJGcEMvY1poWDNHRDRHNmgKS2Z1dlNhY3U3NnNVcnhsbmZGcEZkbDhmR1pZTUlOOUNZWHArWWVJZzRuYW5ZSFJsbk1LM05QSjIzZUVHdkpjeQpLdUZWNndIUzFlWmg1M0J0aWRlY3czcmFzZFhJWmMzdFJidlFid3lDbjZ5dVlING0vUXJzMVFUckp2dzdyWU1sCkxyZGxlZm5uWk9XNFNVc3dINkVCWmF3RC9FTFc4eFNORVhudUkzUFp0di9oRVVZd3RKOVdMbk0rRitzc21ldm8KaHVGMUI5VUNnWUVBMFBHSmc2U3N6dHlKNkhyM0tTaEhyN3h5eVVPOVJTK0N3LzBSV2cranJ3SGFlRGRIalpvKwpaYXhxWVdoRUR0aUZieWpJdWR2MFF1aUZhMHVObDUvMGl3YXR2Tm81RitNZWV3WGt1T0YraWE3RFdFODk0a2ZECkVqYXJYWUk3ZkpnTkdxVmthWUw1cGdGcmxpUDhkZDFkK0VlTWV4dmJadTdwYUZzaXBaZWs1NE1DZ1lFQTR5S0cKdzAyMHJTTGRwdlYyQmE2WG4zbFRXUW0wMFlOaVFuY0YrVjJXNm95RjREK2liRUppTUdUZzRESzZLVllNVElpNQpmaVV4WHlib0Fkd1hvTlpqMmhPWmhmMVZSa3g1WGIrOVorbDV3ZFlBMGR4RmV1ajBDakpmd3p1UTNuOUxZOWxlCnJSSi91SklkbHhKWkx2Z0RLZzdRZ2NuNkJCN2Y1Ujlwa1JKaTgxY0NnWUJYZ2xITnlOSjNjUFp4WDg3VWRnSlEKSCtVVFZrT1hEbWIrSHFkOXlMOE5OUUdEQitQMzhubmZxMjZDaldDenR3dHJtdkUycG1DUEJVT2J4SER3NkJWTApoT2lQQi9hUmdwWHBnSFppMkU1ZTY4cjAyWHRab2lTWkpEeHhWWElFcE1vWU50enZNK1BMR3gwc0xMWTN4eGJzClBVc2c1SEhua25nL05LdzJIbVQ2Y1FLQmdEaW9lQzFueU5ZWGlHc0pkL05hNWYrbDZDQ2h4elVzTE9xZmZpSUMKTW84M2xuMmw0Z0pYWE43dGl4cmlESVliTE40NmpPcm1wRFkwSWxPMGIwQnp1bHkvM3VBSm5hZjNrNTdMSVpnMgpLV1VzMk8rQW51UldEK29yUHJBWXY3NkF5bkdSMjRnWXdUdHRWMnhENjNOSDhxSWZKK3Y0VWlHTkFoVEpqUy9mCkFrZnBBb0dBQ0pRS0lOU0hZOWN2RGZseWNWNmRCcndGS0hRb3oyZGg5Z0EvSjBGazYyc0VrNDY1SUtINm96VDQKQTlSZi8yMHBLZG40dmRnTktJQ3R1cUNKN1JIMC82bVRZWXUwSEJTWHo1elZIdWczTHpFbGxOdVB4MnRhc0x0MgpjdElsVkVrdk96L1hCa3BMVUE2TDlaR01Ha2tyeUJoNEdXd2FCajBHeldUQ2JMUGZ3N3c9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
    mode: allowTLS
    image:
      repository: bitnamilegacy/nginx

redis:
  tls:
    enabled: true
    autoGenerated: true
    authClients: true

postgresql:
  containerPorts:
    postgresql: 6432
  primary:
    service:
      ports:
        postgresql: 6432

secrets:
  ext-redis:
    enabled: true
    stringData:
      redis-url: cf-redis
      redis-password: hoC9szf7NtrU
  mongodb-tls:
    enabled: true
    data:
      ca.pem: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwdGVVMXYKYm1kdkxXTmhNQjRYRFRJME1ETXlPREE1TXpZME0xb1hEVEk1TURNeU56QTVNelkwTTFvd1ZqRUxNQWtHQTFVRQpCaE1DUVZVeEV6QVJCZ05WQkFnTUNsTnZiV1V0VTNSaGRHVXhJVEFmQmdOVkJBb01HRWx1ZEdWeWJtVjBJRmRwClpHZHBkSE1nVUhSNUlFeDBaREVQTUEwR0ExVUVBd3dHWTJaMWMyVnlNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUYKQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0bGNMT2pGYnBRanJwUHdjUjVtY2xwVE53TityMGhQQjZkb240b3JZbFhIMgp5YmoyU3F6VmlqMFNVdVF4YjQ5TWlMYU9Pb21hUmhmclJlR2JEK0RwQy9yOTMwVnQ4TVJKbmxhUmpSdFJxdWdGCmo4VzZqampWcjNEYjduNzdvTXJOSHIyeVJPcjRneGpHWEJGOEZ4bmoyU01DRmc1dlVJVTliNHRYUXBYaGErTHgKUSs5bzZjckZDUzNFeTNySDE3RUp5eEg2dVo2bEFFWTlDdVdCcFNSTC9pdXFIZTJnMDlRQmRUemp2YmJoUGNoOAptSTlpWjEyMFA4RUZMU2ZRSVhnVktRZHFsNWJRM3UxNXZEc0VTUURzamEvRnk0UThwaks4T3Z1ZmZmTkF2WGZrClQ3aEQzKzdhOTFyVDBVaHpyK2tDSHB6ZzZ1L0JPNFN4QlVTM2VMaU1RUUlEQVFBQm8wSXdRREFkQmdOVkhRNEUKRmdRVXd0QTBNVi9RMEl1cyswSm1CTE1FeDRGZEdZSXdId1lEVlIwakJCZ3dGb0FVRmpJZlErRzFTSEJIZXJqegpZRTQxNHkyQ1lTWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQndzSnVRUTNsbTJtb2VaTERtUFZDcHlsNkhaCnltNitqNzcwUlBjV2V4cG9tcVlhZ0tYR25qMGliZE9lU3JqNEQrNkNsc3hobjFEbURSTFlJRk1rOXFCRFU4aTUKTy9YTjhldkZnWkxTdCtDQjRzSFpVTEFSeVZYTVczZks2ZzNVWVlneFhpaVE2ZkN3UEhjbVU2OTZnTXFSbjBNbwo1b01CUFluRHdLaWJIK3JsVmFiTzEvOEtzQlBBY2ZDU093V01Na0VXNDlJcjMzeDJOOVZQT3htMm9TWTdnOFN3CkV4NzFvYXJBRzlZN2NQTkNNOEYvcmlSREtaNk9yN2cwZGY4VC9Ibm9xdWxFT01mc1RqQ3hRdElaWVdVTXlNWmcKRGtaQjhyMUpCVERSSk1VWHVERHlyazdmVnBqOWJLRElIUlFmczkzRnpLMXVRajdQRWhjZkFUS1hLaWM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRQzJWd3M2TVZ1bENPdWsKL0J4SG1aeVdsTTNBMzZ2U0U4SHAyaWZpaXRpVmNmYkp1UFpLck5XS1BSSlM1REZ2ajB5SXRvNDZpWnBHRit0Rgo0WnNQNE9rTCt2M2ZSVzN3eEVtZVZwR05HMUdxNkFXUHhicU9PTld2Y052dWZ2dWd5czBldmJKRTZ2aURHTVpjCkVYd1hHZVBaSXdJV0RtOVFoVDF2aTFkQ2xlRnI0dkZENzJqcHlzVUpMY1RMZXNmWHNRbkxFZnE1bnFVQVJqMEsKNVlHbEpFditLNm9kN2FEVDFBRjFQT085dHVFOXlIeVlqMkpuWGJRL3dRVXRKOUFoZUJVcEIycVhsdERlN1htOApPd1JKQU95TnI4WExoRHltTXJ3Nis1OTk4MEM5ZCtSUHVFUGY3dHIzV3RQUlNIT3Y2UUllbk9EcTc4RTdoTEVGClJMZDR1SXhCQWdNQkFBRUNnZ0VBTlNmOEFHdDZOWXI3czEzQjJzZTM1QmdlUVcrVFZndG5lUWFkb1Fmc0t1a04KMG5IbTd3OGlzNG1wU1Z2MzQzZHBqdU4xWkRCUU5zWHJVelI1Y1hBV1VHVkwxR2FYcmR4elA4TXA3SEo5NU81KwpESk5PbHY2UG9QVXNVSU5aVk44NlhBOWVKSVJCaldwUURYQVZkbUNZVVdsSXh1aFBZREJ2b0JDRmtFWkVjS0E1Cm5zWWFSQmxNUTA1THVFV1RmeDRDY3dRT09mTHdLUDZDZGVnaEpySWd3czdGakFQUCt2UHRzL3Iza3dGbUZsUmYKVzBQRHErUGhlUWd3WmNrSDdDTUxtMmkwRmVJUmtwc3g2NlVHN1hmUUcyQ3poZjltdUdhV0d0QTQ2ckIzd1BoUgpTOVpEeEFoVWtHenlVbVdxbjRDdEp5T0tzUjJRRTh0VnRBVFRTMnVTeHdLQmdRRDM1ckhhYUgzVXJMZ0IyKzZ4Cmd2QXI4SXVpK3hmYkNGM0FyNG9uSW5vTWgra2wxYUtpbDMrUVdBNjNjb2VSWTYwMmtmSHVVbC8zRU1zVWl0cWQKZTVZU2thdkRud2tRYmdOUnc5NUdHelErRU0wTU92VllQWTZxZGNkQU1VSG91U00xY29kb0ZpdXIvdFV4N25EdQovQytVTm1TbG54bGRhbE43UFpoQ0Nqd056d0tCZ1FDOFRBaGsvQldDQjdPNTRqUktvZkNiZkpOZEZYUEErTUFCCjFBZVM0aTlOcU10M1R0eElGc1hicFcyK3hMQ2JhRkJNZUJRY2xTWGRiOHA4cndNQTA4TXVpcC9ocHVQRTNnQlkKVVNJYlRkSVM1STczbnV4WHRKNFBUS3gwSEI4MGpubjRQajIxQTJsY0x1allFeXhaVlQrcFNDUjd2T3lMQk1mWQpTQ0FoYWkvWTd3S0JnUUNVQ0ZlR1E4VjRIVmVZREp4QnRoM3pMeVpEUWN1aUNTSHE4U2YvYkpBVE1ZbWhCU3lrCkNQR3M0VmlRWlR6ZExmZCtVYkoxalEwdlBRRDRHRjZwa2VZdzJub0dTODZlMkFMMWJaQXFydzRJVGdJVDNwVXAKaDBETk81MnJFSDc2R0t3VXUzcHVSbWIzd3luT01rT1FBbG5yR0h3TGhyRWYzbUZSZzV1TFBBOVdjd0tCZ1FDUApvTmVPWUJMdjJud25QL3B2SzFOaTV3VnBMV0hjUW1JRGd2NDc5amZxM3VSRW4yeTd1Rk00RmRtK2VEM1diUjFECkZ4MFFLRngzcWp3a0cwTUpNSDVqVSs1Y3EzWjF4bmt3NU1KRlhYanVYRlVKWUxvYXRIVVVhb0hwRjBKZVRvZU8KNmJzY0Jmd3FDc1lsZTRxS29kSXJpQkg4S01HdDBQbTNhbHpINEQyYkZRS0JnUURsQzM3cXhmR2JlSVBSUUFNWgpKb1FUU1ppeDJ5UGlxaUhYUlZnTzZtbmRvNnZQM2ZQMFp4Y2lBZ0dyeXJ3S2UzRDBCQ3BuUkZ2Rkt1Q25sT2YxCmx5NjNtc2dka2Uycmg3S1hFTDJsMjRjd01raysvUittZVJnMDdjaG1vZkIwTWR5ekVNaTlaeHcwQ0ZTWWxOdkwKK2UyUndKZHVYOGxSTUpXa2l4YzQzOXc5a0E9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="

extraResources:
- apiVersion: v1
  kind: Service
  metadata:
    name: cf-redis
  spec:
    ports:
    - name: tcp-redis
      port: 6379
      protocol: TCP
      targetPort: redis
    selector:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: cf
      app.kubernetes.io/name: redis
    type: ClusterIP

seed-e2e:
  enabled: false
